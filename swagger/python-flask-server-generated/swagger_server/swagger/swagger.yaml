---
swagger: "2.0"
info:
  description: "This is a Raspberrypi's management server.  You can find\nout more\
    \ about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).\n"
  version: "0.0.1"
  title: "Swagger RaspiConnection Manager"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:8080"
basePath: "/v0"
tags:
- name: "setup"
  description: "Everything about your raspi setup"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "operate"
  description: "Everything about your raspi operate and test"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /install:
    post:
      tags:
      - "setup"
      summary: "Add a new raspi to the user and trasfer basic files as zip."
      operationId: "install_raspi"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "raspi object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Raspi"
      responses:
        405:
          description: "Invalid input"
      security:
      - raspi_auth:
        - "write:raspi"
        - "read:raspi"
      x-swagger-router-controller: "swagger_server.controllers.setup_controller"
    put:
      tags:
      - "setup"
      summary: "Update an existing raspi"
      operationId: "update_pet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Raspi"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - raspi_auth:
        - "write:raspi"
        - "read:raspi"
      x-swagger-router-controller: "swagger_server.controllers.setup_controller"
  /operate/schedules:
    get:
      tags:
      - "operate"
      summary: "Get the Schedules that all your raspi held"
      operationId: "get_schedule"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "utc_date"
        in: "query"
        description: "ISO8601 by UTC"
        required: true
        type: "string"
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Schedule"
        400:
          description: "Invalid date format is supplied"
      x-swagger-router-controller: "swagger_server.controllers.operate_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      operationId: "create_users_with_array_input"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      operationId: "create_users_with_list_input"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "login_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logout_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      operationId: "get_user_by_name"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "update_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
securityDefinitions:
  raspi_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:raspi: "modify raspi in your account"
      read:raspi: "read your raspi"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Model:
    type: "object"
    properties:
      kernel_version:
        type: "string"
        example: "4.14.90-v7+"
        description: "output of 'uname --kernel-version'"
      machine_type:
        type: "string"
        example: "armv7l"
        description: "output of 'uname --machine'"
      hw_type:
        type: "object"
        description: "available kits"
        properties: {}
    example:
      machine_type: "armv7l"
      hw_type: "{}"
      kernel_version: "4.14.90-v7+"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
    example:
      name: "name"
      id: 6
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
    example:
      name: "name"
      id: 1
  Operation:
    type: "object"
    properties:
      command:
        type: "string"
      repeat:
        type: "number"
    xml:
      name: "Operation"
  Operations:
    xml:
      name: "Operations"
    type: "array"
    items:
      $ref: "#/definitions/Operation"
  Schedule:
    type: "object"
    properties:
      name:
        type: "string"
      time:
        type: "string"
        example: "2018-01-01T00:00Z"
      message:
        type: "string"
      operations:
        $ref: "#/definitions/Operations"
    xml:
      name: "Schedule"
    example:
      operations: ""
      name: "name"
      time: "2018-01-01T00:00Z"
      message: "message"
  Raspi:
    type: "object"
    required:
    - "model"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "raspi001"
      model:
        $ref: "#/definitions/Model"
      IP:
        type: "string"
        example: "192.168.11.100"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Raspi"
    example:
      IP: "192.168.11.100"
      name: "raspi001"
      model:
        machine_type: "armv7l"
        hw_type: "{}"
        kernel_version: "4.14.90-v7+"
      id: 0
      category:
        name: "name"
        id: 6
      tags:
      - name: "name"
        id: 1
      - name: "name"
        id: 1
      status: "available"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
